AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  SpringPetStoreApi:
    Export:
      Name: SpringPetStoreApi
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/pets'
Parameters:
  PetReadCapacity:
    Default: 1
    Type: Number
    Description: Read capacity for the DynamoDB pet table.
    MinValue: 1
  PetWriteCapacity:
    Default: 1
    Type: Number
    Description: Write capacity for the DynamoDB pet table.
    MinValue: 1
  PetTableName:
    Default: pets
    Type: String
    Description: Pet table name.
Description: Example Pet Store API written with spring with the aws-serverless-java-container
  library
Resources:
  PetStoreFunctionGetResourcePermissionProd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref 'PetStoreFunction'
      SourceArn: !Sub ['arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/ANY/*',
        {__Stage__: Prod, __ApiId__: !Ref 'ServerlessRestApi'}]
  PetStoreFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
  PetsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - KeyType: HASH
        AttributeName: petId
      TableName: !Ref 'PetTableName'
      AttributeDefinitions:
      - AttributeName: petId
        AttributeType: S
      ProvisionedThroughput:
        WriteCapacityUnits: !Ref 'PetWriteCapacity'
        ReadCapacityUnits: !Ref 'PetReadCapacity'
  ServerlessRestApiDeployment890601c135:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'ServerlessRestApi'
      Description: 'RestApi deployment id: 890601c1358383069b4e37ebbc6a8dffd8a10bfd'
      StageName: Stage
  PetStoreFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: my-lambda-package
        S3Key: jobextra-serverless-app-1.0-SNAPSHOT.jar
      MemorySize: 512
      Environment:
        Variables:
          PET_TABLE_NAME: !Ref 'PetsTable'
      Handler: com.andado.jobextra.function.LambdaPetsHandler::handleRequest
      Role: !GetAtt [PetStoreFunctionRole, Arn]
      Timeout: 20
      Runtime: java8
  ServerlessRestApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref 'ServerlessRestApiDeployment890601c135'
      RestApiId: !Ref 'ServerlessRestApi'
      StageName: Prod
  ServerlessRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PetStoreFunction.Arn}/invocations'
              responses: {}
        swagger: '2.0'
  PetStoreFunctionGetResourcePermissionTest:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref 'PetStoreFunction'
      SourceArn: !Sub ['arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/ANY/*',
        {__Stage__: '*', __ApiId__: !Ref 'ServerlessRestApi'}]
